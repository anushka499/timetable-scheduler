{"version":3,"sources":["components/Logo/Logo.js","components/App.js","serviceWorker.js","index.js","components/Logo/activity.png"],"names":["Logo","className","style","display","justifyContent","options","max","height","width","src","activity","paddingTop","alt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","particlesOptions","particles","number","value","density","enable","value_area","App","state","isSignedIn","uiConfig","signInFlow","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","FacebookAuthProvider","callbacks","signInSuccess","componentDidMount","onAuthStateChanged","user","setState","params","this","Button","type","variant","color","onClick","signOut","currentUser","displayName","firebaseAuth","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"wXA4BeA,EAvBF,WACX,OACE,yBACEC,UAAU,UACVC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,WAE1C,kBAAC,IAAD,CACEH,UAAU,oBACVI,QAAS,CAAEC,IAAK,IAChBJ,MAAO,CAAEK,OAAQ,IAAKC,MAAO,MAE7B,yBAAKP,UAAU,kBACb,yBACEQ,IAAKC,IACLR,MAAO,CAAES,WAAY,OACrBC,IAAI,4B,0BCXhBC,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,4CACZC,YAAa,mDACbC,UAAW,8BAGb,IAAMC,EAAmB,CACvBC,UAAW,CACTC,OAAQ,CACNC,MAAO,IACPC,QAAS,CACPC,QAAQ,EACRC,WAAY,QA0DLC,E,4MAnDbC,MAAQ,CAAEC,YAAY,G,EACtBC,SAAW,CACTC,WAAY,QACZC,cAAe,CACblB,IAASmB,KAAKC,mBAAmBC,YACjCrB,IAASmB,KAAKG,kBAAkBD,YAChCrB,IAASmB,KAAKI,qBAAqBF,aAErCG,UAAW,CACTC,cAAe,kBAAM,K,EAIzBC,kBAAoB,WAClB1B,IAASmB,OAAOQ,oBAAmB,SAACC,GAClC,EAAKC,SAAS,CAAEd,aAAca,Q,uDAKhC,OACE,yBAAKxC,UAAU,OACb,kBAAC,IAAD,CAAWA,UAAU,YAAY0C,OAAQxB,IACxCyB,KAAKjB,MAAMC,WACV,8BACE,kBAACiB,EAAA,EAAD,CACEC,KAAK,SACLC,QAAQ,YACRC,MAAM,UACNC,QAAS,kBAAMpC,IAASmB,OAAOkB,YAJjC,YAQA,uCAAarC,IAASmB,OAAOmB,YAAYC,cAG3C,6BACE,kBAAC,EAAD,MACA,yBAAKnD,UAAU,cACb,kBAAC,IAAD,CACE4B,SAAUe,KAAKf,SACfwB,aAAcxC,IAASmB,gB,GA1CrBsB,aChBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.c207b2d4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Tilt from \"react-tilt\";\r\nimport \"./Logo.css\";\r\nimport activity from \"./activity.png\";\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div\r\n      className=\"ma4 mt0\"\r\n      style={{ display: \"flex\", justifyContent: \"center\" }}\r\n    >\r\n      <Tilt\r\n        className=\"Tilt br2 shadow-2\"\r\n        options={{ max: 25 }}\r\n        style={{ height: 400, width: 600 }}\r\n      >\r\n        <div className=\"Tilt-inner pa3\">\r\n          <img\r\n            src={activity}\r\n            style={{ paddingTop: \"5px\" }}\r\n            alt=\"activity scheduling\"\r\n          ></img>\r\n        </div>\r\n      </Tilt>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport firebase from \"firebase\";\nimport { Button } from \"@material-ui/core\";\nimport Logo from \"./Logo/Logo\";\nimport \"tachyons\";\nimport Particles from \"react-particles-js\";\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBwPBLFoMMqwyUJcJewqLip4guij7CNjZg\",\n  authDomain: \"activity-scheduling-d6be4.firebaseapp.com\",\n  databaseURL: \"https://activity-scheduling-d6be4.firebaseio.com\",\n  projectId: \"activity-scheduling-d6be4\",\n});\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 100,\n      density: {\n        enable: true,\n        value_area: 700\n      }\n    }\n  },\n};\n\nclass App extends Component {\n  state = { isSignedIn: false };\n  uiConfig = {\n    signInFlow: \"popup\",\n    signInOptions: [\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      firebase.auth.EmailAuthProvider.PROVIDER_ID,\n      firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n    ],\n    callbacks: {\n      signInSuccess: () => false,\n    },\n  };\n\n  componentDidMount = () => {\n    firebase.auth().onAuthStateChanged((user) => {\n      this.setState({ isSignedIn: !!user });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className='particles' params={particlesOptions} />\n        {this.state.isSignedIn ? (\n          <span>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => firebase.auth().signOut()}\n            >\n              Sign Out\n            </Button>\n            <h1>Welcome {firebase.auth().currentUser.displayName}</h1>\n          </span>\n        ) : (\n          <div>\n            <Logo></Logo>\n            <div className=\"firebaseUI\">\n              <StyledFirebaseAuth\n                uiConfig={this.uiConfig}\n                firebaseAuth={firebase.auth()}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/activity.f54fa458.png\";"],"sourceRoot":""}